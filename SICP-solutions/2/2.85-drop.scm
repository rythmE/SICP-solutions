(define (project n) 
  (let ((type (type-tag n))
    (cond ((eq? type 'rational)
			(make-integer (/ (car (contents n)) (cadr (contents n)))))
		  ((eq? type 'real)
			(make-integer (round (contents n))))
		  ((eq? type 'complex)
			(make-real (real n))))
		  (else n))))
		  
(define (drop n)
  (let ((type (type-tag n))
    (cond ((eq? type 'integer) n)
		  ((eq? type 'real)
		   (if (equal? (raise (raise (project n))) n)
		   (project n)
		   n))
		  (else (if (equal? (raise (project (drop n))) n)
					(project n)
					n))))))